@use "../../base/variables";
@import "../../base/mixins";

@mixin generate-process-styles {
  .container {
    .desktopSvg {
      .loadingPath {
        stroke-dasharray: 1000;
        stroke-dashoffset: 1000;
        stroke: #3fc1ff;
        /* Set the initial color */
      }

      .loadingPath1 {
        animation: colorChange 5s linear forwards;
      }

      .loadingPath3 {
        animation: colorChange 5s linear forwards;
      }

      .loadingPath4 {
        animation: colorChange 5s linear 0.8s forwards;
      }

      .loadingPath5 {
        animation: colorChange 5s linear 1.2s forwards;
      }

      .loadingPath6 {
        animation: colorChange 5s linear 1.4s forwards;
      }

      .loadingPath7 {
        animation: colorChange 5s linear 1.8s forwards;
      }

      .loadingPath9 {
        animation: colorChange 5s linear forwards;
      }

      .loadingPath11 {
        animation: colorChange 5s linear forwards;
      }

      .loadingPath12 {
        animation: colorChange 5s linear 1s forwards;
      }

      .loadingPath13 {
        animation: colorChange 5s linear 1.6s forwards;
      }

      .loadingPath15 {
        animation: colorChange 5s linear 1.8s forwards;
      }

      .loadingPath17 {
        animation: colorChange 5s linear forwards;
      }

      .loadingPath14 {
        animation: colorChange1 5s linear 1.8s forwards;
      }

      .loadingPathRound {
        stroke: white;
        /* Initial color */
      }

      .loadingPathRound2 {
        animation: colorChangeRound 0.1s linear 0.7s forwards;
      }

      .loadingPathRoundFill {
        fill: white;
        /* Initial color */
      }

      .loadingPathRoundFill2 {
        animation: colorChangeRoundFill 0.1s linear 0.7s forwards;
      }

      .loadingPathRound8 {
        animation: colorChangeRound 0.1s linear 2.2s forwards;
      }

      .loadingPathRoundFill8 {
        animation: colorChangeRoundFill 0.1s linear 2.2s forwards;
      }

      .loadingPathRound10 {
        animation: colorChangeRound 0.1s linear 0.7s forwards;
      }

      .loadingPathRoundFill10 {
        animation: colorChangeRoundFill 0.1s linear 0.7s forwards;
      }

      .loadingPathRound16 {
        animation: colorChangeRound 0.1s linear 2.2s forwards;
      }

      .loadingPathRoundFill16 {
        animation: colorChangeRoundFill 0.1s linear 2.2s forwards;
      }

      .loadingPathRound18 {
        animation: colorChangeRound 0.1s linear 0.6s forwards;
      }

      .loadingPathRoundFill18 {
        animation: colorChangeRoundFill 0.1s linear 0.6s forwards;
      }

      .loadingPathRound0 {
        animation: colorChangeRound 0.1s linear forwards;
      }

      .loadingPathRoundFill0 {
        animation: colorChangeRoundFill 0.1s linear forwards;
      }
    }

    .mobileSvg {
      .loadingPath {
        stroke-dasharray: 1000;
        stroke-dashoffset: 1000;
        stroke: #3fc1ff;
        /* Set the initial color */
      }

      .loadingPathRound {
        stroke: white;
        /* Initial color */
      }

      .loadingPathRoundFill {
        fill: white;
        /* Initial color */
      }

      .loadingPath1 {
        animation: colorChange 5s linear 0.8s forwards;
      }

      .loadingPath3 {
        animation: colorChange 5s linear 2.8s forwards;
      }

      .loadingPath5 {
        animation: colorChange 5s linear 4.8s forwards;
      }

      .loadingPath7 {
        animation: colorChange 5s linear 6.8s forwards;
      }

      .loadingPath9 {
        animation: colorChange 5s linear 8.8s forwards;
      }

      .loadingPathRound0 {
        animation: colorChangeRound 0.1s linear forwards;
      }

      .loadingPathRound2 {
        animation: colorChangeRound 0.1s linear 2.7s forwards;
      }

      .loadingPathRound4 {
        animation: colorChangeRound 0.1s linear 4.7s forwards;
      }

      .loadingPathRound6 {
        animation: colorChangeRound 0.1s linear 6.7s forwards;
      }

      .loadingPathRound8 {
        animation: colorChangeRound 0.1s linear 8.7s forwards;
      }

      .loadingPathRound10 {
        animation: colorChangeRound 0.1s linear 10.7s forwards;
      }

      .loadingPathRoundFill0 {
        animation: colorChangeRoundFill 0.1s linear forwards;
      }

      .loadingPathRoundFill2 {
        animation: colorChangeRoundFill 0.1s linear 2.7s forwards;
      }

      .loadingPathRoundFill4 {
        animation: colorChangeRoundFill 0.1s linear 4.7s forwards;
      }

      .loadingPathRoundFill6 {
        animation: colorChangeRoundFill 0.1s linear 6.7s forwards;
      }

      .loadingPathRoundFill8 {
        animation: colorChangeRoundFill 0.1s linear 8.7s forwards;
      }

      .loadingPathRoundFill10 {
        animation: colorChangeRoundFill 0.1s linear 10.7s forwards;
      }
    }

    @keyframes colorChange1 {
      from {
        stroke-dashoffset: 1000;
        stroke: #3fc1ff;
        /* Change to the final color */
      }

      to {
        stroke-dashoffset: 0;
        stroke: #3fc1ff;
        /* Change to the final color */
      }
    }

    @keyframes colorChange {
      to {
        stroke-dashoffset: 0;
        stroke: #3fc1ff;
        /* Change to the final color */
      }
    }

    @keyframes colorChangeRound {
      to {
        stroke: #3fc1ff;
        /* Final color after 3-second delay */
      }
    }

    @keyframes colorChangeRoundFill {
      to {
        fill: #3fc1ff;
        /* Final color after 3-second delay */
      }
    }

    .title {
      @include font-style(
        getProcessSizes(process-title-fz),
        variables.$fw-500,
        getProcessSizes(process-title-lh)
      );
    }

    .description {
      margin-top: getProcessSizes(process-description-mt);
      @include font-style(
        getProcessSizes(process-description-fz),
        variables.$fw-400,
        getProcessSizes(process-description-lh)
      );
    }

    @media only screen and (max-width: 1440px) and (min-width: 1025px) {
      .title {
        @include font-style(calcVWL(36), variables.$fw-500, calcVWL(44));
      }

      .description {
        margin-top: calcVWL(24);

        p {
          @include font-style(calcVWL(18), variables.$fw-400, calcVWL(24));
        }
      }
    }

    @media (max-width: 1024px) {
      .title {
        @include font-style(calcVWT(36), variables.$fw-500, calcVWT(44));
      }

      .description {
        margin-top: getProcessSizes(process-description-mt);
        @include font-style(calcVWT(18), variables.$fw-400, calcVWT(24));
      }
    }

    .mobileSvg {
      display: none;
    }

    @media (max-width: 576px) {
      .title {
        @include font-style(calcVWM(36), variables.$fw-500, calcVWM(44));
      }

      .description {
        margin-top: getProcessSizes(process-description-mt);
        margin-bottom: calcVWM(80);
        @include font-style(calcVWM(18), variables.$fw-400, calcVWM(24));
      }

      .desktopSvg {
        display: none;
      }

      .mobileSvg {
        display: block;
      }
    }
  }
}
